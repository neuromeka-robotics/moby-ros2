# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import CameraControl_pb2 as CameraControl__pb2


class CameraControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsCameraReady = channel.unary_unary(
                '/CC.CameraControl/IsCameraReady',
                request_serializer=CameraControl__pb2.Empty.SerializeToString,
                response_deserializer=CameraControl__pb2.IntVal.FromString,
                )
        self.IsRecording = channel.unary_unary(
                '/CC.CameraControl/IsRecording',
                request_serializer=CameraControl__pb2.Empty.SerializeToString,
                response_deserializer=CameraControl__pb2.IntVal.FromString,
                )
        self.StartRecording = channel.unary_unary(
                '/CC.CameraControl/StartRecording',
                request_serializer=CameraControl__pb2.StringVal.SerializeToString,
                response_deserializer=CameraControl__pb2.IntVal.FromString,
                )
        self.FinishRecording = channel.unary_unary(
                '/CC.CameraControl/FinishRecording',
                request_serializer=CameraControl__pb2.Empty.SerializeToString,
                response_deserializer=CameraControl__pb2.IntVal.FromString,
                )


class CameraControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsCameraReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsCameraReady': grpc.unary_unary_rpc_method_handler(
                    servicer.IsCameraReady,
                    request_deserializer=CameraControl__pb2.Empty.FromString,
                    response_serializer=CameraControl__pb2.IntVal.SerializeToString,
            ),
            'IsRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.IsRecording,
                    request_deserializer=CameraControl__pb2.Empty.FromString,
                    response_serializer=CameraControl__pb2.IntVal.SerializeToString,
            ),
            'StartRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRecording,
                    request_deserializer=CameraControl__pb2.StringVal.FromString,
                    response_serializer=CameraControl__pb2.IntVal.SerializeToString,
            ),
            'FinishRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishRecording,
                    request_deserializer=CameraControl__pb2.Empty.FromString,
                    response_serializer=CameraControl__pb2.IntVal.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CC.CameraControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CameraControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsCameraReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CC.CameraControl/IsCameraReady',
            CameraControl__pb2.Empty.SerializeToString,
            CameraControl__pb2.IntVal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CC.CameraControl/IsRecording',
            CameraControl__pb2.Empty.SerializeToString,
            CameraControl__pb2.IntVal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CC.CameraControl/StartRecording',
            CameraControl__pb2.StringVal.SerializeToString,
            CameraControl__pb2.IntVal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CC.CameraControl/FinishRecording',
            CameraControl__pb2.Empty.SerializeToString,
            CameraControl__pb2.IntVal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
